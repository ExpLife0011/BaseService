// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: define_sys.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "define_sys.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MsgSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSession_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TUdpControlFlag_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TUdpControlCmd_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_define_5fsys_2eproto() {
  protobuf_AddDesc_define_5fsys_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "define_sys.proto");
  GOOGLE_CHECK(file != NULL);
  MsgSession_descriptor_ = file->message_type(0);
  static const int MsgSession_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSession, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSession, check_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSession, index_),
  };
  MsgSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSession_descriptor_,
      MsgSession::default_instance_,
      MsgSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSession));
  TUdpControlFlag_descriptor_ = file->enum_type(0);
  TUdpControlCmd_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_define_5fsys_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSession_descriptor_, &MsgSession::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_define_5fsys_2eproto() {
  delete MsgSession::default_instance_;
  delete MsgSession_reflection_;
}

void protobuf_AddDesc_define_5fsys_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020define_sys.proto\";\n\nMsgSession\022\017\n\007sess"
    "ion\030\001 \001(\006\022\r\n\005check\030\002 \001(\007\022\r\n\005index\030\003 \001(\r*"
    "5\n\017TUdpControlFlag\022\r\n\tPROTO_CMD\020\001\022\023\n\016PRO"
    "TO_NEED_ACK\020\200\001*<\n\016TUdpControlCmd\022\021\n\rPROT"
    "O_CMD_ACK\020\001\022\027\n\023PROTO_CMD_HEARTBEAT\020\002", 196);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "define_sys.proto", &protobuf_RegisterTypes);
  MsgSession::default_instance_ = new MsgSession();
  MsgSession::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_define_5fsys_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_define_5fsys_2eproto {
  StaticDescriptorInitializer_define_5fsys_2eproto() {
    protobuf_AddDesc_define_5fsys_2eproto();
  }
} static_descriptor_initializer_define_5fsys_2eproto_;
const ::google::protobuf::EnumDescriptor* TUdpControlFlag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUdpControlFlag_descriptor_;
}
bool TUdpControlFlag_IsValid(int value) {
  switch(value) {
    case 1:
    case 128:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TUdpControlCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUdpControlCmd_descriptor_;
}
bool TUdpControlCmd_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSession::kSessionFieldNumber;
const int MsgSession::kCheckFieldNumber;
const int MsgSession::kIndexFieldNumber;
#endif  // !_MSC_VER

MsgSession::MsgSession()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgSession)
}

void MsgSession::InitAsDefaultInstance() {
}

MsgSession::MsgSession(const MsgSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgSession)
}

void MsgSession::SharedCtor() {
  _cached_size_ = 0;
  session_ = GOOGLE_ULONGLONG(0);
  check_ = 0u;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSession::~MsgSession() {
  // @@protoc_insertion_point(destructor:MsgSession)
  SharedDtor();
}

void MsgSession::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSession_descriptor_;
}

const MsgSession& MsgSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_define_5fsys_2eproto();
  return *default_instance_;
}

MsgSession* MsgSession::default_instance_ = NULL;

MsgSession* MsgSession::New() const {
  return new MsgSession;
}

void MsgSession::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgSession*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(session_, index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 session = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_check;
        break;
      }

      // optional fixed32 check = 2;
      case 2: {
        if (tag == 21) {
         parse_check:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &check_)));
          set_has_check();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional uint32 index = 3;
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgSession)
  return false;
#undef DO_
}

void MsgSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgSession)
  // optional fixed64 session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->session(), output);
  }

  // optional fixed32 check = 2;
  if (has_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->check(), output);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgSession)
}

::google::protobuf::uint8* MsgSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgSession)
  // optional fixed64 session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->session(), target);
  }

  // optional fixed32 check = 2;
  if (has_check()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->check(), target);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgSession)
  return target;
}

int MsgSession::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 session = 1;
    if (has_session()) {
      total_size += 1 + 8;
    }

    // optional fixed32 check = 2;
    if (has_check()) {
      total_size += 1 + 4;
    }

    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSession::MergeFrom(const MsgSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_check()) {
      set_check(from.check());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSession::CopyFrom(const MsgSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSession::IsInitialized() const {

  return true;
}

void MsgSession::Swap(MsgSession* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(check_, other->check_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSession_descriptor_;
  metadata.reflection = MsgSession_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
