// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_c2s.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_c2s.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MsgVLP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgVLP_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCreatePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCreatePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLoadPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLoadPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDBID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDBID_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgID32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgID32_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgChat_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5fc2s_2eproto() {
  protobuf_AddDesc_msg_5fc2s_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_c2s.proto");
  GOOGLE_CHECK(file != NULL);
  MsgVLP_descriptor_ = file->message_type(0);
  static const int MsgVLP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgVLP, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgVLP, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgVLP, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgVLP, auth_type_),
  };
  MsgVLP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgVLP_descriptor_,
      MsgVLP::default_instance_,
      MsgVLP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgVLP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgVLP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgVLP));
  MsgLogin_descriptor_ = file->message_type(1);
  static const int MsgLogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogin, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogin, version_),
  };
  MsgLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLogin_descriptor_,
      MsgLogin::default_instance_,
      MsgLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLogin));
  MsgCreatePlayer_descriptor_ = file->message_type(2);
  static const int MsgCreatePlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreatePlayer, name_),
  };
  MsgCreatePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCreatePlayer_descriptor_,
      MsgCreatePlayer::default_instance_,
      MsgCreatePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreatePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreatePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCreatePlayer));
  MsgLoadPlayer_descriptor_ = file->message_type(3);
  static const int MsgLoadPlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoadPlayer, player_idx_),
  };
  MsgLoadPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLoadPlayer_descriptor_,
      MsgLoadPlayer::default_instance_,
      MsgLoadPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoadPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoadPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLoadPlayer));
  MsgDBID_descriptor_ = file->message_type(4);
  static const int MsgDBID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBID, dbid_),
  };
  MsgDBID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDBID_descriptor_,
      MsgDBID::default_instance_,
      MsgDBID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDBID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDBID));
  MsgID32_descriptor_ = file->message_type(5);
  static const int MsgID32_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgID32, id_),
  };
  MsgID32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgID32_descriptor_,
      MsgID32::default_instance_,
      MsgID32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgID32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgID32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgID32));
  MsgChat_descriptor_ = file->message_type(6);
  static const int MsgChat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChat, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChat, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChat, name_),
  };
  MsgChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgChat_descriptor_,
      MsgChat::default_instance_,
      MsgChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgChat));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5fc2s_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgVLP_descriptor_, &MsgVLP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLogin_descriptor_, &MsgLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCreatePlayer_descriptor_, &MsgCreatePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLoadPlayer_descriptor_, &MsgLoadPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDBID_descriptor_, &MsgDBID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgID32_descriptor_, &MsgID32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgChat_descriptor_, &MsgChat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5fc2s_2eproto() {
  delete MsgVLP::default_instance_;
  delete MsgVLP_reflection_;
  delete MsgLogin::default_instance_;
  delete MsgLogin_reflection_;
  delete MsgCreatePlayer::default_instance_;
  delete MsgCreatePlayer_reflection_;
  delete MsgLoadPlayer::default_instance_;
  delete MsgLoadPlayer_reflection_;
  delete MsgDBID::default_instance_;
  delete MsgDBID_reflection_;
  delete MsgID32::default_instance_;
  delete MsgID32_reflection_;
  delete MsgChat::default_instance_;
  delete MsgChat_reflection_;
}

void protobuf_AddDesc_msg_5fc2s_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_define_5fpro_2eproto();
  ::ATTRIB_TYPE::protobuf_AddDesc_define_5fattrib_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmsg_c2s.proto\032\020define_pro.proto\032\023defin"
    "e_attrib.proto\"\\\n\006MsgVLP\022\020\n\010username\030\001 \001"
    "(\t\022\020\n\010password\030\002 \001(\t\022\017\n\007version\030\003 \001(\007\022\035\n"
    "\tauth_type\030\004 \001(\0162\n.TAuthType\"*\n\010MsgLogin"
    "\022\r\n\005token\030\001 \001(\t\022\017\n\007version\030\002 \001(\007\"\037\n\017MsgC"
    "reatePlayer\022\014\n\004name\030\001 \001(\t\"#\n\rMsgLoadPlay"
    "er\022\022\n\nplayer_idx\030\001 \001(\r\"\027\n\007MsgDBID\022\014\n\004dbi"
    "d\030\001 \001(\006\"\025\n\007MsgID32\022\n\n\002id\030\001 \001(\r\"2\n\007MsgCha"
    "t\022\014\n\004text\030\001 \001(\t\022\013\n\003pid\030\002 \001(\004\022\014\n\004name\030\003 \001"
    "(\t", 362);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_c2s.proto", &protobuf_RegisterTypes);
  MsgVLP::default_instance_ = new MsgVLP();
  MsgLogin::default_instance_ = new MsgLogin();
  MsgCreatePlayer::default_instance_ = new MsgCreatePlayer();
  MsgLoadPlayer::default_instance_ = new MsgLoadPlayer();
  MsgDBID::default_instance_ = new MsgDBID();
  MsgID32::default_instance_ = new MsgID32();
  MsgChat::default_instance_ = new MsgChat();
  MsgVLP::default_instance_->InitAsDefaultInstance();
  MsgLogin::default_instance_->InitAsDefaultInstance();
  MsgCreatePlayer::default_instance_->InitAsDefaultInstance();
  MsgLoadPlayer::default_instance_->InitAsDefaultInstance();
  MsgDBID::default_instance_->InitAsDefaultInstance();
  MsgID32::default_instance_->InitAsDefaultInstance();
  MsgChat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5fc2s_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5fc2s_2eproto {
  StaticDescriptorInitializer_msg_5fc2s_2eproto() {
    protobuf_AddDesc_msg_5fc2s_2eproto();
  }
} static_descriptor_initializer_msg_5fc2s_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MsgVLP::kUsernameFieldNumber;
const int MsgVLP::kPasswordFieldNumber;
const int MsgVLP::kVersionFieldNumber;
const int MsgVLP::kAuthTypeFieldNumber;
#endif  // !_MSC_VER

MsgVLP::MsgVLP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgVLP)
}

void MsgVLP::InitAsDefaultInstance() {
}

MsgVLP::MsgVLP(const MsgVLP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgVLP)
}

void MsgVLP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
  auth_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgVLP::~MsgVLP() {
  // @@protoc_insertion_point(destructor:MsgVLP)
  SharedDtor();
}

void MsgVLP::SharedDtor() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void MsgVLP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgVLP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgVLP_descriptor_;
}

const MsgVLP& MsgVLP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fc2s_2eproto();
  return *default_instance_;
}

MsgVLP* MsgVLP::default_instance_ = NULL;

MsgVLP* MsgVLP::New() const {
  return new MsgVLP;
}

void MsgVLP::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    version_ = 0u;
    auth_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgVLP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgVLP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_version;
        break;
      }

      // optional fixed32 version = 3;
      case 3: {
        if (tag == 29) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_auth_type;
        break;
      }

      // optional .TAuthType auth_type = 4;
      case 4: {
        if (tag == 32) {
         parse_auth_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TAuthType_IsValid(value)) {
            set_auth_type(static_cast< ::TAuthType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgVLP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgVLP)
  return false;
#undef DO_
}

void MsgVLP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgVLP)
  // optional string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // optional fixed32 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->version(), output);
  }

  // optional .TAuthType auth_type = 4;
  if (has_auth_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->auth_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgVLP)
}

::google::protobuf::uint8* MsgVLP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgVLP)
  // optional string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional fixed32 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->version(), target);
  }

  // optional .TAuthType auth_type = 4;
  if (has_auth_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->auth_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgVLP)
  return target;
}

int MsgVLP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional fixed32 version = 3;
    if (has_version()) {
      total_size += 1 + 4;
    }

    // optional .TAuthType auth_type = 4;
    if (has_auth_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->auth_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgVLP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgVLP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgVLP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgVLP::MergeFrom(const MsgVLP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_auth_type()) {
      set_auth_type(from.auth_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgVLP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgVLP::CopyFrom(const MsgVLP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgVLP::IsInitialized() const {

  return true;
}

void MsgVLP::Swap(MsgVLP* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(version_, other->version_);
    std::swap(auth_type_, other->auth_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgVLP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgVLP_descriptor_;
  metadata.reflection = MsgVLP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLogin::kTokenFieldNumber;
const int MsgLogin::kVersionFieldNumber;
#endif  // !_MSC_VER

MsgLogin::MsgLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgLogin)
}

void MsgLogin::InitAsDefaultInstance() {
}

MsgLogin::MsgLogin(const MsgLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgLogin)
}

void MsgLogin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLogin::~MsgLogin() {
  // @@protoc_insertion_point(destructor:MsgLogin)
  SharedDtor();
}

void MsgLogin::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void MsgLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLogin_descriptor_;
}

const MsgLogin& MsgLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fc2s_2eproto();
  return *default_instance_;
}

MsgLogin* MsgLogin::default_instance_ = NULL;

MsgLogin* MsgLogin::New() const {
  return new MsgLogin;
}

void MsgLogin::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_version;
        break;
      }

      // optional fixed32 version = 2;
      case 2: {
        if (tag == 21) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgLogin)
  return false;
#undef DO_
}

void MsgLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgLogin)
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // optional fixed32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgLogin)
}

::google::protobuf::uint8* MsgLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgLogin)
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // optional fixed32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgLogin)
  return target;
}

int MsgLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional fixed32 version = 2;
    if (has_version()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLogin::MergeFrom(const MsgLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLogin::CopyFrom(const MsgLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLogin::IsInitialized() const {

  return true;
}

void MsgLogin::Swap(MsgLogin* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLogin_descriptor_;
  metadata.reflection = MsgLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCreatePlayer::kNameFieldNumber;
#endif  // !_MSC_VER

MsgCreatePlayer::MsgCreatePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgCreatePlayer)
}

void MsgCreatePlayer::InitAsDefaultInstance() {
}

MsgCreatePlayer::MsgCreatePlayer(const MsgCreatePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgCreatePlayer)
}

void MsgCreatePlayer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCreatePlayer::~MsgCreatePlayer() {
  // @@protoc_insertion_point(destructor:MsgCreatePlayer)
  SharedDtor();
}

void MsgCreatePlayer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MsgCreatePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCreatePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCreatePlayer_descriptor_;
}

const MsgCreatePlayer& MsgCreatePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fc2s_2eproto();
  return *default_instance_;
}

MsgCreatePlayer* MsgCreatePlayer::default_instance_ = NULL;

MsgCreatePlayer* MsgCreatePlayer::New() const {
  return new MsgCreatePlayer;
}

void MsgCreatePlayer::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCreatePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgCreatePlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgCreatePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgCreatePlayer)
  return false;
#undef DO_
}

void MsgCreatePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgCreatePlayer)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgCreatePlayer)
}

::google::protobuf::uint8* MsgCreatePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgCreatePlayer)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgCreatePlayer)
  return target;
}

int MsgCreatePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCreatePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCreatePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCreatePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCreatePlayer::MergeFrom(const MsgCreatePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCreatePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCreatePlayer::CopyFrom(const MsgCreatePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCreatePlayer::IsInitialized() const {

  return true;
}

void MsgCreatePlayer::Swap(MsgCreatePlayer* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCreatePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCreatePlayer_descriptor_;
  metadata.reflection = MsgCreatePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLoadPlayer::kPlayerIdxFieldNumber;
#endif  // !_MSC_VER

MsgLoadPlayer::MsgLoadPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgLoadPlayer)
}

void MsgLoadPlayer::InitAsDefaultInstance() {
}

MsgLoadPlayer::MsgLoadPlayer(const MsgLoadPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgLoadPlayer)
}

void MsgLoadPlayer::SharedCtor() {
  _cached_size_ = 0;
  player_idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLoadPlayer::~MsgLoadPlayer() {
  // @@protoc_insertion_point(destructor:MsgLoadPlayer)
  SharedDtor();
}

void MsgLoadPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgLoadPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLoadPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLoadPlayer_descriptor_;
}

const MsgLoadPlayer& MsgLoadPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fc2s_2eproto();
  return *default_instance_;
}

MsgLoadPlayer* MsgLoadPlayer::default_instance_ = NULL;

MsgLoadPlayer* MsgLoadPlayer::New() const {
  return new MsgLoadPlayer;
}

void MsgLoadPlayer::Clear() {
  player_idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLoadPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgLoadPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_idx = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_idx_)));
          set_has_player_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgLoadPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgLoadPlayer)
  return false;
#undef DO_
}

void MsgLoadPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgLoadPlayer)
  // optional uint32 player_idx = 1;
  if (has_player_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgLoadPlayer)
}

::google::protobuf::uint8* MsgLoadPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgLoadPlayer)
  // optional uint32 player_idx = 1;
  if (has_player_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgLoadPlayer)
  return target;
}

int MsgLoadPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_idx = 1;
    if (has_player_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLoadPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLoadPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLoadPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLoadPlayer::MergeFrom(const MsgLoadPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_idx()) {
      set_player_idx(from.player_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLoadPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLoadPlayer::CopyFrom(const MsgLoadPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLoadPlayer::IsInitialized() const {

  return true;
}

void MsgLoadPlayer::Swap(MsgLoadPlayer* other) {
  if (other != this) {
    std::swap(player_idx_, other->player_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLoadPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLoadPlayer_descriptor_;
  metadata.reflection = MsgLoadPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDBID::kDbidFieldNumber;
#endif  // !_MSC_VER

MsgDBID::MsgDBID()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgDBID)
}

void MsgDBID::InitAsDefaultInstance() {
}

MsgDBID::MsgDBID(const MsgDBID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgDBID)
}

void MsgDBID::SharedCtor() {
  _cached_size_ = 0;
  dbid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDBID::~MsgDBID() {
  // @@protoc_insertion_point(destructor:MsgDBID)
  SharedDtor();
}

void MsgDBID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgDBID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDBID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDBID_descriptor_;
}

const MsgDBID& MsgDBID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fc2s_2eproto();
  return *default_instance_;
}

MsgDBID* MsgDBID::default_instance_ = NULL;

MsgDBID* MsgDBID::New() const {
  return new MsgDBID;
}

void MsgDBID::Clear() {
  dbid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDBID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgDBID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 dbid = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dbid_)));
          set_has_dbid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgDBID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgDBID)
  return false;
#undef DO_
}

void MsgDBID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgDBID)
  // optional fixed64 dbid = 1;
  if (has_dbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->dbid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgDBID)
}

::google::protobuf::uint8* MsgDBID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBID)
  // optional fixed64 dbid = 1;
  if (has_dbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->dbid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBID)
  return target;
}

int MsgDBID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 dbid = 1;
    if (has_dbid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDBID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDBID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDBID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDBID::MergeFrom(const MsgDBID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dbid()) {
      set_dbid(from.dbid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDBID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBID::CopyFrom(const MsgDBID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBID::IsInitialized() const {

  return true;
}

void MsgDBID::Swap(MsgDBID* other) {
  if (other != this) {
    std::swap(dbid_, other->dbid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDBID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDBID_descriptor_;
  metadata.reflection = MsgDBID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgID32::kIdFieldNumber;
#endif  // !_MSC_VER

MsgID32::MsgID32()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgID32)
}

void MsgID32::InitAsDefaultInstance() {
}

MsgID32::MsgID32(const MsgID32& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgID32)
}

void MsgID32::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgID32::~MsgID32() {
  // @@protoc_insertion_point(destructor:MsgID32)
  SharedDtor();
}

void MsgID32::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgID32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgID32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgID32_descriptor_;
}

const MsgID32& MsgID32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fc2s_2eproto();
  return *default_instance_;
}

MsgID32* MsgID32::default_instance_ = NULL;

MsgID32* MsgID32::New() const {
  return new MsgID32;
}

void MsgID32::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgID32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgID32)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgID32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgID32)
  return false;
#undef DO_
}

void MsgID32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgID32)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgID32)
}

::google::protobuf::uint8* MsgID32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgID32)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgID32)
  return target;
}

int MsgID32::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgID32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgID32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgID32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgID32::MergeFrom(const MsgID32& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgID32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgID32::CopyFrom(const MsgID32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgID32::IsInitialized() const {

  return true;
}

void MsgID32::Swap(MsgID32* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgID32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgID32_descriptor_;
  metadata.reflection = MsgID32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgChat::kTextFieldNumber;
const int MsgChat::kPidFieldNumber;
const int MsgChat::kNameFieldNumber;
#endif  // !_MSC_VER

MsgChat::MsgChat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgChat)
}

void MsgChat::InitAsDefaultInstance() {
}

MsgChat::MsgChat(const MsgChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgChat)
}

void MsgChat::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgChat::~MsgChat() {
  // @@protoc_insertion_point(destructor:MsgChat)
  SharedDtor();
}

void MsgChat::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MsgChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgChat_descriptor_;
}

const MsgChat& MsgChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fc2s_2eproto();
  return *default_instance_;
}

MsgChat* MsgChat::default_instance_ = NULL;

MsgChat* MsgChat::New() const {
  return new MsgChat;
}

void MsgChat::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
    pid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgChat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }

      // optional uint64 pid = 2;
      case 2: {
        if (tag == 16) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgChat)
  return false;
#undef DO_
}

void MsgChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgChat)
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // optional uint64 pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->pid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MsgChat)
}

::google::protobuf::uint8* MsgChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgChat)
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional uint64 pid = 2;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->pid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgChat)
  return target;
}

int MsgChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint64 pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgChat::MergeFrom(const MsgChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgChat::CopyFrom(const MsgChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChat::IsInitialized() const {

  return true;
}

void MsgChat::Swap(MsgChat* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(pid_, other->pid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgChat_descriptor_;
  metadata.reflection = MsgChat_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
