// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_c2s.proto

#ifndef PROTOBUF_msg_5fc2s_2eproto__INCLUDED
#define PROTOBUF_msg_5fc2s_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "define_pro.pb.h"
#include "define_attrib.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msg_5fc2s_2eproto();
void protobuf_AssignDesc_msg_5fc2s_2eproto();
void protobuf_ShutdownFile_msg_5fc2s_2eproto();

class MsgVLP;
class MsgLogin;
class MsgCreatePlayer;
class MsgLoadPlayer;
class MsgDBID;
class MsgID32;
class MsgChat;

// ===================================================================

class MsgVLP : public ::google::protobuf::Message {
 public:
  MsgVLP();
  virtual ~MsgVLP();

  MsgVLP(const MsgVLP& from);

  inline MsgVLP& operator=(const MsgVLP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgVLP& default_instance();

  void Swap(MsgVLP* other);

  // implements Message ----------------------------------------------

  MsgVLP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgVLP& from);
  void MergeFrom(const MsgVLP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional fixed32 version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional .TAuthType auth_type = 4;
  inline bool has_auth_type() const;
  inline void clear_auth_type();
  static const int kAuthTypeFieldNumber = 4;
  inline ::TAuthType auth_type() const;
  inline void set_auth_type(::TAuthType value);

  // @@protoc_insertion_point(class_scope:MsgVLP)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_auth_type();
  inline void clear_has_auth_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* username_;
  ::std::string* password_;
  ::google::protobuf::uint32 version_;
  int auth_type_;
  friend void  protobuf_AddDesc_msg_5fc2s_2eproto();
  friend void protobuf_AssignDesc_msg_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_msg_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static MsgVLP* default_instance_;
};
// -------------------------------------------------------------------

class MsgLogin : public ::google::protobuf::Message {
 public:
  MsgLogin();
  virtual ~MsgLogin();

  MsgLogin(const MsgLogin& from);

  inline MsgLogin& operator=(const MsgLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgLogin& default_instance();

  void Swap(MsgLogin* other);

  // implements Message ----------------------------------------------

  MsgLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgLogin& from);
  void MergeFrom(const MsgLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string token = 1;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional fixed32 version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MsgLogin)
 private:
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* token_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_msg_5fc2s_2eproto();
  friend void protobuf_AssignDesc_msg_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_msg_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static MsgLogin* default_instance_;
};
// -------------------------------------------------------------------

class MsgCreatePlayer : public ::google::protobuf::Message {
 public:
  MsgCreatePlayer();
  virtual ~MsgCreatePlayer();

  MsgCreatePlayer(const MsgCreatePlayer& from);

  inline MsgCreatePlayer& operator=(const MsgCreatePlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCreatePlayer& default_instance();

  void Swap(MsgCreatePlayer* other);

  // implements Message ----------------------------------------------

  MsgCreatePlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCreatePlayer& from);
  void MergeFrom(const MsgCreatePlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:MsgCreatePlayer)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_msg_5fc2s_2eproto();
  friend void protobuf_AssignDesc_msg_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_msg_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static MsgCreatePlayer* default_instance_;
};
// -------------------------------------------------------------------

class MsgLoadPlayer : public ::google::protobuf::Message {
 public:
  MsgLoadPlayer();
  virtual ~MsgLoadPlayer();

  MsgLoadPlayer(const MsgLoadPlayer& from);

  inline MsgLoadPlayer& operator=(const MsgLoadPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgLoadPlayer& default_instance();

  void Swap(MsgLoadPlayer* other);

  // implements Message ----------------------------------------------

  MsgLoadPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgLoadPlayer& from);
  void MergeFrom(const MsgLoadPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 player_idx = 1;
  inline bool has_player_idx() const;
  inline void clear_player_idx();
  static const int kPlayerIdxFieldNumber = 1;
  inline ::google::protobuf::uint32 player_idx() const;
  inline void set_player_idx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MsgLoadPlayer)
 private:
  inline void set_has_player_idx();
  inline void clear_has_player_idx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 player_idx_;
  friend void  protobuf_AddDesc_msg_5fc2s_2eproto();
  friend void protobuf_AssignDesc_msg_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_msg_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static MsgLoadPlayer* default_instance_;
};
// -------------------------------------------------------------------

class MsgDBID : public ::google::protobuf::Message {
 public:
  MsgDBID();
  virtual ~MsgDBID();

  MsgDBID(const MsgDBID& from);

  inline MsgDBID& operator=(const MsgDBID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgDBID& default_instance();

  void Swap(MsgDBID* other);

  // implements Message ----------------------------------------------

  MsgDBID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgDBID& from);
  void MergeFrom(const MsgDBID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 dbid = 1;
  inline bool has_dbid() const;
  inline void clear_dbid();
  static const int kDbidFieldNumber = 1;
  inline ::google::protobuf::uint64 dbid() const;
  inline void set_dbid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:MsgDBID)
 private:
  inline void set_has_dbid();
  inline void clear_has_dbid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 dbid_;
  friend void  protobuf_AddDesc_msg_5fc2s_2eproto();
  friend void protobuf_AssignDesc_msg_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_msg_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static MsgDBID* default_instance_;
};
// -------------------------------------------------------------------

class MsgID32 : public ::google::protobuf::Message {
 public:
  MsgID32();
  virtual ~MsgID32();

  MsgID32(const MsgID32& from);

  inline MsgID32& operator=(const MsgID32& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgID32& default_instance();

  void Swap(MsgID32* other);

  // implements Message ----------------------------------------------

  MsgID32* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgID32& from);
  void MergeFrom(const MsgID32& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MsgID32)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_msg_5fc2s_2eproto();
  friend void protobuf_AssignDesc_msg_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_msg_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static MsgID32* default_instance_;
};
// -------------------------------------------------------------------

class MsgChat : public ::google::protobuf::Message {
 public:
  MsgChat();
  virtual ~MsgChat();

  MsgChat(const MsgChat& from);

  inline MsgChat& operator=(const MsgChat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgChat& default_instance();

  void Swap(MsgChat* other);

  // implements Message ----------------------------------------------

  MsgChat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgChat& from);
  void MergeFrom(const MsgChat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string text = 1;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 1;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // optional uint64 pid = 2;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 2;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:MsgChat)
 private:
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* text_;
  ::google::protobuf::uint64 pid_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_msg_5fc2s_2eproto();
  friend void protobuf_AssignDesc_msg_5fc2s_2eproto();
  friend void protobuf_ShutdownFile_msg_5fc2s_2eproto();

  void InitAsDefaultInstance();
  static MsgChat* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgVLP

// optional string username = 1;
inline bool MsgVLP::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgVLP::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgVLP::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgVLP::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& MsgVLP::username() const {
  // @@protoc_insertion_point(field_get:MsgVLP.username)
  return *username_;
}
inline void MsgVLP::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:MsgVLP.username)
}
inline void MsgVLP::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgVLP.username)
}
inline void MsgVLP::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgVLP.username)
}
inline ::std::string* MsgVLP::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgVLP.username)
  return username_;
}
inline ::std::string* MsgVLP::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgVLP::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgVLP.username)
}

// optional string password = 2;
inline bool MsgVLP::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgVLP::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgVLP::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgVLP::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& MsgVLP::password() const {
  // @@protoc_insertion_point(field_get:MsgVLP.password)
  return *password_;
}
inline void MsgVLP::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:MsgVLP.password)
}
inline void MsgVLP::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgVLP.password)
}
inline void MsgVLP::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgVLP.password)
}
inline ::std::string* MsgVLP::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgVLP.password)
  return password_;
}
inline ::std::string* MsgVLP::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgVLP::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgVLP.password)
}

// optional fixed32 version = 3;
inline bool MsgVLP::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgVLP::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgVLP::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgVLP::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 MsgVLP::version() const {
  // @@protoc_insertion_point(field_get:MsgVLP.version)
  return version_;
}
inline void MsgVLP::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:MsgVLP.version)
}

// optional .TAuthType auth_type = 4;
inline bool MsgVLP::has_auth_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgVLP::set_has_auth_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgVLP::clear_has_auth_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgVLP::clear_auth_type() {
  auth_type_ = 1;
  clear_has_auth_type();
}
inline ::TAuthType MsgVLP::auth_type() const {
  // @@protoc_insertion_point(field_get:MsgVLP.auth_type)
  return static_cast< ::TAuthType >(auth_type_);
}
inline void MsgVLP::set_auth_type(::TAuthType value) {
  assert(::TAuthType_IsValid(value));
  set_has_auth_type();
  auth_type_ = value;
  // @@protoc_insertion_point(field_set:MsgVLP.auth_type)
}

// -------------------------------------------------------------------

// MsgLogin

// optional string token = 1;
inline bool MsgLogin::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgLogin::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgLogin::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgLogin::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& MsgLogin::token() const {
  // @@protoc_insertion_point(field_get:MsgLogin.token)
  return *token_;
}
inline void MsgLogin::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:MsgLogin.token)
}
inline void MsgLogin::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgLogin.token)
}
inline void MsgLogin::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgLogin.token)
}
inline ::std::string* MsgLogin::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgLogin.token)
  return token_;
}
inline ::std::string* MsgLogin::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgLogin::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgLogin.token)
}

// optional fixed32 version = 2;
inline bool MsgLogin::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgLogin::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgLogin::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgLogin::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 MsgLogin::version() const {
  // @@protoc_insertion_point(field_get:MsgLogin.version)
  return version_;
}
inline void MsgLogin::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:MsgLogin.version)
}

// -------------------------------------------------------------------

// MsgCreatePlayer

// optional string name = 1;
inline bool MsgCreatePlayer::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgCreatePlayer::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgCreatePlayer::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgCreatePlayer::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MsgCreatePlayer::name() const {
  // @@protoc_insertion_point(field_get:MsgCreatePlayer.name)
  return *name_;
}
inline void MsgCreatePlayer::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:MsgCreatePlayer.name)
}
inline void MsgCreatePlayer::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgCreatePlayer.name)
}
inline void MsgCreatePlayer::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgCreatePlayer.name)
}
inline ::std::string* MsgCreatePlayer::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgCreatePlayer.name)
  return name_;
}
inline ::std::string* MsgCreatePlayer::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgCreatePlayer::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgCreatePlayer.name)
}

// -------------------------------------------------------------------

// MsgLoadPlayer

// optional uint32 player_idx = 1;
inline bool MsgLoadPlayer::has_player_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgLoadPlayer::set_has_player_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgLoadPlayer::clear_has_player_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgLoadPlayer::clear_player_idx() {
  player_idx_ = 0u;
  clear_has_player_idx();
}
inline ::google::protobuf::uint32 MsgLoadPlayer::player_idx() const {
  // @@protoc_insertion_point(field_get:MsgLoadPlayer.player_idx)
  return player_idx_;
}
inline void MsgLoadPlayer::set_player_idx(::google::protobuf::uint32 value) {
  set_has_player_idx();
  player_idx_ = value;
  // @@protoc_insertion_point(field_set:MsgLoadPlayer.player_idx)
}

// -------------------------------------------------------------------

// MsgDBID

// optional fixed64 dbid = 1;
inline bool MsgDBID::has_dbid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgDBID::set_has_dbid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgDBID::clear_has_dbid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgDBID::clear_dbid() {
  dbid_ = GOOGLE_ULONGLONG(0);
  clear_has_dbid();
}
inline ::google::protobuf::uint64 MsgDBID::dbid() const {
  // @@protoc_insertion_point(field_get:MsgDBID.dbid)
  return dbid_;
}
inline void MsgDBID::set_dbid(::google::protobuf::uint64 value) {
  set_has_dbid();
  dbid_ = value;
  // @@protoc_insertion_point(field_set:MsgDBID.dbid)
}

// -------------------------------------------------------------------

// MsgID32

// optional uint32 id = 1;
inline bool MsgID32::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgID32::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgID32::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgID32::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 MsgID32::id() const {
  // @@protoc_insertion_point(field_get:MsgID32.id)
  return id_;
}
inline void MsgID32::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:MsgID32.id)
}

// -------------------------------------------------------------------

// MsgChat

// optional string text = 1;
inline bool MsgChat::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgChat::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgChat::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgChat::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& MsgChat::text() const {
  // @@protoc_insertion_point(field_get:MsgChat.text)
  return *text_;
}
inline void MsgChat::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:MsgChat.text)
}
inline void MsgChat::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgChat.text)
}
inline void MsgChat::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgChat.text)
}
inline ::std::string* MsgChat::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgChat.text)
  return text_;
}
inline ::std::string* MsgChat::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgChat::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgChat.text)
}

// optional uint64 pid = 2;
inline bool MsgChat::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgChat::set_has_pid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgChat::clear_has_pid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgChat::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 MsgChat::pid() const {
  // @@protoc_insertion_point(field_get:MsgChat.pid)
  return pid_;
}
inline void MsgChat::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:MsgChat.pid)
}

// optional string name = 3;
inline bool MsgChat::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgChat::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgChat::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgChat::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MsgChat::name() const {
  // @@protoc_insertion_point(field_get:MsgChat.name)
  return *name_;
}
inline void MsgChat::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:MsgChat.name)
}
inline void MsgChat::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgChat.name)
}
inline void MsgChat::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgChat.name)
}
inline ::std::string* MsgChat::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgChat.name)
  return name_;
}
inline ::std::string* MsgChat::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgChat::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgChat.name)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msg_5fc2s_2eproto__INCLUDED
